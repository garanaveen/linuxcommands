"""
Log Plotter Script
------------------
This script filters log entries from a file based on a specified log ID 
and visualizes the timestamps on a horizontal graph. The graph spaces the 
points proportionally based on the time difference between logs, with emphasis 
on entries occurring close together (e.g., within 2 seconds).

Usage:
------
1. Save this script as `log_plotter.py`.
2. Install `matplotlib` if not already installed:
   pip install matplotlib
3. Run the script using the following format:
   python log_plotter.py --file <log_file_path> --logid <log_id>

Example:
--------
Given a log file `logs.txt` with the following content:
16:22:46.343 *[specific.log.id] SpecificFunction() -  0,  0,  3, 
16:23:20.141 *[specific.log.id] SpecificFunction() -  1,  1,  0, 
16:24:20.333 *[specific.log.id] SpecificFunction() -  2,  2,  1, 
16:24:22.994 *[specific.log.id] SpecificFunction() -  3,  3,  2, 

Run the script as follows:
   python log_plotter.py --file logs.txt --logid "specific.log.id"

Output:
-------
1. Filters log entries containing the log ID "specific.log.id".
2. Plots a horizontal graph where:
   - Timestamps are spaced proportionally based on the time difference.
   - Entries close in time (e.g., within 2 seconds) are highlighted with a red line.
   - Timestamps are displayed vertically to avoid overlap.

Command-line Arguments:
-----------------------
--file   : Path to the log file (required).
--logid  : Log ID to filter (required).

Dependencies:
-------------
- Python 3.x
- matplotlib (install with `pip install matplotlib`).

Author:
-------
Naveen Gara (Generated by AI).
"""

import re
import argparse
import matplotlib.pyplot as plt
from datetime import datetime

def parse_logs(file_path, log_id):
    """
    Parses the log file and filters entries based on the specified log ID.

    Args:
        file_path (str): Path to the log file.
        log_id (str): Log ID to filter.

    Returns:
        list: List of timestamps matching the log ID.
    """
    logs = []
    pattern = re.compile(r"(\d{2}:\d{2}:\d{2}\.\d{3}) \*\[" + re.escape(log_id) + r"\] SpecificFunction\(\) - .*")
    
    with open(file_path, "r") as file:
        for line in file:
            match = pattern.search(line)
            if match:
                timestamp = match.group(1)
                logs.append(timestamp)
    return logs

def plot_logs(timestamps):
    """
    Plots the filtered timestamps on a horizontal graph with proportional spacing.

    Args:
        timestamps (list): List of timestamps to plot.
    """
    # Convert timestamps to datetime objects
    times = [datetime.strptime(ts, "%H:%M:%S.%f") for ts in timestamps]
    differences = [(times[i] - times[i-1]).total_seconds() for i in range(1, len(times))]
    
    # Create a proportional spacing for the graph
    x_positions = [0]
    for diff in differences:
        x_positions.append(x_positions[-1] + diff)
    
    # Plot the logs
    plt.figure(figsize=(10, 4))
    plt.scatter(x_positions, [1]*len(x_positions), color="blue", s=100, label="Log Entries")
    
    # Add annotations and emphasis
    for i, ts in enumerate(timestamps):
        plt.annotate(
            ts, 
            (x_positions[i], 1), 
            textcoords="offset points", 
            xytext=(0, 10), 
            ha="center", 
            rotation=90,  # Rotate the text vertically
            fontsize=9    # Adjust font size if needed
        )
        if i > 0 and (times[i] - times[i-1]).total_seconds() <= 2:
            plt.plot(x_positions[i-1:i+1], [1, 1], color="red", linewidth=2, label="Close Logs" if i == 1 else None)
    
    plt.title("Log Timestamps Visualization")
    plt.xlabel("Time Progression (Proportional)")
    plt.yticks([])
    plt.legend(loc="upper right")
    plt.grid(True, axis="x", linestyle="--", alpha=0.7)
    plt.tight_layout()
    plt.show()

def main():
    parser = argparse.ArgumentParser(description="Filter logs and plot time-based visualization.")
    parser.add_argument("--file", required=True, help="Path to the log file.")
    parser.add_argument("--logid", required=True, help="Log ID to filter.")
    args = parser.parse_args()
    
    timestamps = parse_logs(args.file, args.logid)
    if timestamps:
        plot_logs(timestamps)
    else:
        print(f"No logs found with Log ID: {args.logid}")

if __name__ == "__main__":
    main()

