#!/bin/bash

# TODO : figure out the path for utils from the place where this is run. This source only works if its run from the same directory that this script is in.
# source utils.sh

function mkdircd () { mkdir -p "$@" && eval cd "\"\$$#\""; }



export EDITOR="/usr/bin/vim"
export VISUAL="/usr/bin/vim"

set editing-mode vi
set keymap vi-command

set -o vi

bind -x '"\C-l": clear'

function countdown(){
   date1=$((`date +%s` + $1)); 
   while [ "$date1" -ge `date +%s` ]; do 
     echo -ne "$(date -u --date @$(($date1 - `date +%s`)) +%H:%M:%S)\r";
     sleep 0.1
   done
}

function stopwatch(){
  date1=`date +%s`; 
   while true; do 
    echo -ne "$(date -u --date @$((`date +%s` - $date1)) +%H:%M:%S)\r"; 
    sleep 0.1
   done
}

export HISTSIZE=100000000

weather()
{ 
   curl -s "wttr.in/dsm"
}

export PATH=$PATH:$HOME/linuxcommands/scripts/
export PATH=$PATH:$HOME/linuxcommands/ai/pythonscripts/


# Use cdd when you want to change to directory of the given filepath. This way you can avoid deleting the file name at the end.
cdd()
{
DIR=`dirname $1`
echo "${DIR}"
cd ${DIR}
}


#https://stackoverflow.com/questions/24283097/reusing-output-from-last-command-in-bash
# capture the output of a command so it can be retrieved with ret
# cap () { tee /tmp/capture.out}

# return the output of the most recent command that was captured by cap
# ret () { cat /tmp/capture.out }

# To change in to a director, jd() - (i.e. jumpToDirectory) lets you use the partial name of the directory to jump to up to a dept 4. If there are multiple matches, first match is taken. So, try to specify a partial name that is unique enough.
function jd()
{
   DirectoryPartialName=${1}
   DIR_NAME=`find . -maxdepth 4 -type d -name "*${DirectoryPartialName}*" -print -quit`
   if [ ! -z "$DIR_NAME" ]; then
	#If directory is found, cd in to it.
       echo "cd ${DIR_NAME}"
       cd ${DIR_NAME}
   fi
}


function gb()
{
   if [ "$#" = 0 ]; then
      git branch
   else
      git branch | grep $1
   fi
}

# Log for two branches
function git2log()
{
   MAIN_BRANCH="master"
   if [ -n "$(git branch --list "master")" ]
   then
      MAIN_BRANCH="master"
   else
      MAIN_BRANCH="main"
   fi

   echo "MAIN_BRANCH : $MAIN_BRANCH"
   CURRENT_BRANCH=`git branch --show-current`
   echo "CURRENT_BRANCH : $CURRENT_BRANCH"
   git log --oneline --graph ${MAIN_BRANCH} ${CURRENT_BRANCH}
}


#gitdiffwithmain
#gitdiffwithmaster
function gitdwmain()
{
   MAIN_BRANCH="master"
   if [ -n "$(git branch --list "master")" ]
   then
      MAIN_BRANCH="master"
   else
      MAIN_BRANCH="main"
   fi

   echo "MAIN_BRANCH : $MAIN_BRANCH"
   CURRENT_BRANCH=`git branch --show-current`
   echo "CURRENT_BRANCH : $CURRENT_BRANCH"
   git diff ${MAIN_BRANCH}..${CURRENT_BRANCH}
}


function f()
{
    #cat $HOME/ngara-notes/frequentlyusedcommands.txt
    #echo "----------------------------------------------"
    grep $1 $HOME/n/frequentlyusedcommands.txt
    grep $1 $HOME/n/automation/frequentlyusedcommands.txt
    grep $1 $HOME/n/aspen/frequentlyusedcommands.txt
    grep $1 $HOME/n/aspen/RDP-8879-AINotifications/usefulcommands.txt
}

